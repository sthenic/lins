sudo: false
language: c

matrix:
  include:
    - name: "Tests"
      os: linux
      dist: xenial
      script:
        - nim tests

    - name: "Documentation"
      language: python
      python:
        - "3.7"
      os: linux
      dist: xenial
      install:
        - pip3 install sphinx
      before_script:
        - echo "Building documentation"
      script:
        - cd doc/web
        - make html
      deploy:
        provider: pages
        github_token: "$GITHUB_OAUTH_TOKEN"
        local_dir: doc/web/_build/html
        skip_cleanup: true
        keep_history: false
        on:
          branch: latest


    - name: "Build macOS"
      os: osx
      script:
        - nim build
      before_deploy:
        - ARCHIVE_FILENAME="lins-${LINS_VERSION}-macos"
        - tar -czf "${ARCHIVE_FILENAME}.tar.gz" lins LICENSE THIRD_PARTY_LICENSES.md
        - md5 ${ARCHIVE_FILENAME}.tar.gz > ${ARCHIVE_FILENAME}.tar.gz.md5
      deploy:
        provider: releases
        api_key: "$GITHUB_OAUTH_TOKEN"
        skip_cleanup: true
        overwrite: true
        file:
          - "${ARCHIVE_FILENAME}.tar.gz"
          - "${ARCHIVE_FILENAME}.md5"
        on:
          tags: true

    - name: "Build xenial"
      os: linux
      dist: xenial
      script:
        - nim build
      before_deploy:
        - source /etc/os-release
        - PLATFORM_INFO="${ID}-${VERSION_ID}-$(uname -i)"
        - ARCHIVE_FILENAME="lins-${LINS_VERSION}-${PLATFORM_INFO}"
        - cd build
        - chmod -R 755 deb/DEBIAN
        - sh build_deb.sh "${PLATFORM_INFO}"
        - cp *.deb ../
        - cd ..
        - tar -czf "${ARCHIVE_FILENAME}.tar.gz" lins LICENSE THIRD_PARTY_LICENSES.md
        - md5sum "${ARCHIVE_FILENAME}.tar.gz" > ${ARCHIVE_FILENAME}.tar.gz.md5
        - md5sum "${ARCHIVE_FILENAME}.deb" > ${ARCHIVE_FILENAME}.deb.md5
      deploy:
        provider: releases
        api_key: "$GITHUB_OAUTH_TOKEN"
        skip_cleanup: true
        overwrite: true
        file:
          - "${ARCHIVE_FILENAME}.tar.gz"
          - "${ARCHIVE_FILENAME}.tar.gz.md5"
          - "${ARCHIVE_FILENAME}.deb"
          - "${ARCHIVE_FILENAME}.deb.md5"
        on:
          tags: true

    - name: "Build windows"
      os: linux
      dist: xenial
      before_install:
        - sudo apt install -y mingw-w64 zip
      script:
        - nim buildxwin64
      before_deploy:
        - ARCHIVE_FILENAME="lins-${LINS_VERSION}-win_x86_64"
        - curl https://nim-lang.org/download/dlls.zip -sSf > dlls.zip
        - unzip dlls.zip
        - zip "${ARCHIVE_FILENAME}.zip" lins.exe LICENSE THIRD_PARTY_LICENSES.md pcre64.dll
        - md5sum ${ARCHIVE_FILENAME}.zip > ${ARCHIVE_FILENAME}.zip.md5
      deploy:
        provider: releases
        api_key: "$GITHUB_OAUTH_TOKEN"
        skip_cleanup: true
        overwrite: true
        file:
          - "${ARCHIVE_FILENAME}.zip"
          - "${ARCHIVE_FILENAME}.zip.md5"
        on:
          tags: true

install:
  - curl https://nim-lang.org/choosenim/init.sh -sSf > init.sh
  - sh init.sh -y

before_script:
  - export PATH=$HOME/.nimble/bin:$PATH
  - nimble refresh -y
  - nimble install yaml -y
  - LINS_VERSION=$(cat VERSION)
